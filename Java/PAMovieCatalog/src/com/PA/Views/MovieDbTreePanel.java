/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.PA.Views;
import com.PA.Interfaces.*;
import com.PA.MovieCatalog.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.util.*;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;

/**
 *
 * @author Costinel
 */
public class MovieDbTreePanel extends javax.swing.JPanel implements TreeSelectionListener {

    final static String rootString = "MovieCatalog";
    final static String categoriesRootString = "Categories";
    final static String moviesRootString = "Movies";
    
    private MovieDbTreeListener listener;
    private MovieDatabase db;
    DefaultMutableTreeNode rootNode;
    /**
     * Creates new form MovieDbTreePanel
     */
    public MovieDbTreePanel() {
        initComponents();
        dbTree.addTreeSelectionListener(this);
    }
    
    public void setListener(MovieDbTreeListener listener)
    {
        this.listener = listener;
    }
    
    public void setDatabase(MovieDatabase db)
    {
        this.db = db;
    }
    
    public void reloadData()
    {
        rootNode = new DefaultMutableTreeNode(rootString);
        DefaultMutableTreeNode categNode = new DefaultMutableTreeNode(categoriesRootString);
        DefaultMutableTreeNode moviesNode = new DefaultMutableTreeNode(moviesRootString);
        
        List<MovieCategory> listOfCategories = db.getCategoriesList();
        for(MovieCategory aCat : listOfCategories)
        {
            DefaultMutableTreeNode currentCatNode = new DefaultMutableTreeNode(aCat.getName());
             Movie[] moviesList = aCat.getAllMoviesList();
             for(int i = 0; i < moviesList.length; i++)
             {
                 Movie m = moviesList[i];
                 DefaultMutableTreeNode movieNode = new DefaultMutableTreeNode(m.getName());
                 currentCatNode.add(movieNode);
             }
             categNode.add(currentCatNode);
        }
        
        List<Movie> moviesList = db.getListOfMovies();
        for(Movie m : moviesList)
        {
            System.out.println(m.getName());
            DefaultMutableTreeNode movieNode = new DefaultMutableTreeNode(m.getName());
            moviesNode.add(movieNode);
        }
        
        rootNode.add(categNode);
        rootNode.add(moviesNode);
        
        DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);
        
        this.dbTree.setModel(treeModel);
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        dbTree = new javax.swing.JTree();

        jScrollPane1.setViewportView(dbTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree dbTree;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(TreeSelectionEvent e) 
    {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                           dbTree.getLastSelectedPathComponent();
        
        if(node == null)
            return;
        
        String nodeString = (String)node.getUserObject();
        
        this.takeActionFromSelectingNodeWithString(nodeString);
        
    }
    
    private void takeActionFromSelectingNodeWithString(String s)
    {
        if(this.listener  == null)
        {
            return;
        }
        
        if(s.equals(rootString))
        {
            this.listener.movieDbTreeDidSelectRootNode(this);
            return;
        }
        
        if(s.equals(categoriesRootString))
        {
            this.listener.movieDbTreeDidSelectRootCategoryNode(this);
            return;
        }
        
        if(s.equals(moviesRootString))
        {
            this.listener.movieDbTreeDidSelectRootMoviesNode(this);
            return;
        }
        
        Movie m = this.db.findMovieWithName(s);
        if(m != null)
        {
            this.listener.movieDbTreeDidSelectMovie(this, m);
            return;
        }
        
        MovieCategory cat = this.db.findCategoryForName(s);
        if(cat != null)
        {
            this.listener.movieDbTreeDidSelectCategory(this, cat);
        }
        
    }
    
}
