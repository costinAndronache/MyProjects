/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;
import algorithms.*;
import interfaces.SortingAlgorithmListener;
import java.util.*;

import java.awt.Color;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import timers.*;


/**
 *
 * @author Costinel
 */
public class MainAppFrame extends javax.swing.JFrame implements SortingAlgorithmListener {

    /**
     * Creates new form MainAppFrame
     */
    
    private SortingAlgorithm bsAlg;
    private SortingAlgorithm hsAlg;
    private SortingAlgorithm qsAlg;
    
    private AppTimer timer;
    
    private int numOfElements = 5;
    private int speedMultiplier = 1;
    
    private int[] arr;
    private Map<SortingAlgorithm, ArrayViewPanel> map;
    
    
    Thread t0, t1, t2, t3;
    
    public MainAppFrame() {
        initComponents();
        
        this.arrayViewPanelBubbleSort.setSettings(5, 10, Color.yellow, (float)2.5);
        this.arrayViewPanelHeapSort.setSettings(5, 10, Color.yellow, (float)2.5);
        this.arrayViewPanelQuickSort.setSettings(5, 10, Color.yellow, (float)2.5);
        
        int[] arrayBS = new int[]{30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        int[] arrayHS = new int[]{30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        int[] arrayQS = new int[]{30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        
        this.arrayViewPanelBubbleSort.drawArray(arrayBS);
        this.arrayViewPanelHeapSort.drawArray(arrayHS);
        this.arrayViewPanelQuickSort.drawArray(arrayQS);
        
        this.bsAlg = new BubbleSortAlgorithm();
        this.bsAlg.setListener(this);
        this.bsAlg.setSleepTime(250);
        
        this.hsAlg = new HeapSortAlgorithm();
        this.hsAlg.setListener(this);
        this.hsAlg.setSleepTime(250);
        
        this.qsAlg = new MergeSortAlgorithm();
        this.qsAlg.setListener(this);
        this.qsAlg.setSleepTime(250);
        
        
        
        this.map = new HashMap<>();
        
        this.map.put(bsAlg, arrayViewPanelBubbleSort);
        this.map.put(hsAlg, arrayViewPanelHeapSort);
        this.map.put(qsAlg, arrayViewPanelQuickSort);
        
        
        this.jSpinner.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) 
            {
                Integer i = (Integer)jSpinner.getValue();
                numOfElements = i;
            }
        });
        
        
        this.jSpinner2.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) 
            {
                Integer i = (Integer)jSpinner.getValue();
                speedMultiplier = i;
            }
        });
        
        this.timer = new AppTimer();
        this.timer.setView(appTimerView);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arrayViewPanelBubbleSort = new views.ArrayViewPanel();
        arrayViewPanelHeapSort = new views.ArrayViewPanel();
        arrayViewPanelQuickSort = new views.ArrayViewPanel();
        appTimerView = new views.AppTimerView();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        arrayViewPanelBubbleSort.setBackground(new java.awt.Color(0, 102, 102));

        arrayViewPanelHeapSort.setBackground(new java.awt.Color(0, 51, 0));

        arrayViewPanelQuickSort.setBackground(new java.awt.Color(153, 153, 0));

        jLabel1.setText("BubbleSort");

        jLabel2.setText("HeapSort");

        jLabel3.setText("MergeSort");

        jButton1.setText("Start/Restart");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 5, 35, 1));

        jLabel4.setText("Number of integers");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Speed");

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(1, 1, 4, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(arrayViewPanelHeapSort, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(arrayViewPanelBubbleSort, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                                            .addComponent(jSpinner2))
                                        .addGap(32, 32, 32)))
                                .addComponent(appTimerView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(arrayViewPanelQuickSort, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(arrayViewPanelBubbleSort, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(arrayViewPanelHeapSort, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel2)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(arrayViewPanelQuickSort, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(appTimerView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(34, 34, 34))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        this.beginNewSorting();
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainAppFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private views.AppTimerView appTimerView;
    private views.ArrayViewPanel arrayViewPanelBubbleSort;
    private views.ArrayViewPanel arrayViewPanelHeapSort;
    private views.ArrayViewPanel arrayViewPanelQuickSort;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSpinner jSpinner;
    private javax.swing.JSpinner jSpinner2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void sortingAlgorithmDidUpdateArray(SortingAlgorithm alg, int[] array) 
    {
        
        //synchronized(this)
        //{
        ArrayViewPanel arrayViewPanel = this.map.get(alg);
        arrayViewPanel.drawArray(array);
        revalidate();        
        //}
    } 

    @Override
    public void sortingAlgorithmDidFinish(SortingAlgorithm alg) 
    {
        
        System.out.println("Finished");
       ArrayViewPanel arrayViewPanel = this.map.get(alg);
        arrayViewPanel.displayFinished();
        revalidate();
        
        if(alg == this.bsAlg)
            timer.bubbleSortStopped();
        
        if(alg == this.hsAlg)
            timer.heapSortStopped();
        
        if(alg == this.qsAlg)
            timer.mergeSortStopped();
        
    }
    
    
    private int[] randomArray()
    {
        int[] result = new int[this.numOfElements];
        Random r = new Random();
        for(int i=0; i<this.numOfElements; i++)
        {
            result[i] = r.nextInt();
            if(result[i] < 0)
                result[i] = -result[i];
            
            result[i] = result[i] % 40 + 1;
        }
        
        return result;
    }
    
    
    private void beginNewSorting()
    {
        
        int[] bs = this.randomArray();
        int[] ms = Arrays.copyOf(bs, bs.length);
        int[] hs = Arrays.copyOf(bs, bs.length);
        
        this.qsAlg.sortArrayWith(ms);
        this.bsAlg.sortArrayWith(bs);
        this.hsAlg.sortArrayWith(hs);
        
        this.qsAlg.setSleepTime(this.speedMultiplier * 50);
        this.bsAlg.setSleepTime(this.speedMultiplier * 50);
        this.hsAlg.setSleepTime(this.speedMultiplier * 50);
        
        t0 = new Thread(this.timer);
        t1 = new Thread(this.bsAlg);
        t2 = new Thread(this.hsAlg);
        t3 = new Thread(this.qsAlg);
        
        this.arrayViewPanelBubbleSort.hideFinished();
        this.arrayViewPanelHeapSort.hideFinished();
        this.arrayViewPanelQuickSort.hideFinished();
        
        this.appTimerView.clearAll();
        
        t0.start();
        t1.start();
        t2.start();
        t3.start();
        
    }
    
}
