/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pagocommon;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;

/**
 *
 * @author Costinel
 */
public class GameboardPanel extends javax.swing.JPanel {

    /**
     * Creates new form GameboardPanel
     */
    public GameboardPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


    private static final int offset = 10;
    
    private GameBoard gameBoard;
    private int circleRadius;
    
    public void setGameboard(GameBoard g)
    {
        this.gameBoard = g;
    }
    
    public void setCircleRadius(int newRadius)
    {
        this.circleRadius = newRadius;
    }
    
    @Override
    public void paint(Graphics g)
    {
        super.paint(g);
        
        //1.Draw the lines
        g.setColor(Color.black);
        
        if(this.gameBoard == null)
            return;
        
        CircleType[][] matrix = this.gameBoard.getMatrixRepresentation();
        
        Dimension d = this.getSize();
        
        for(int i=0; i< matrix.length; i++)
        {
            g.drawLine(offset, offset + (i*2*this.circleRadius), d.width, (i*2*this.circleRadius));
        }
        
        for(int j=0; j<matrix[0].length; j++)
        {
            g.drawLine(offset + (j*2*this.circleRadius), offset, offset + (j*2*this.circleRadius),
                    d.height);
        }
        
    }
    
    
}
