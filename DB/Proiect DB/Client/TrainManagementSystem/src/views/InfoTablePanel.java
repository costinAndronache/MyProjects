/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import models.*;
import viewInterfaces.InfoTableListener;
import java.util.*;
import javax.swing.table.DefaultTableModel;
import static views.InfoTableState.*;
/**
 *
 * @author costin
 */

enum InfoTableState
{
    ForTracks,
     ForTrains,
    ForStations,
     ForConductors,
    ForSchedules,
     ForNothing
}
public class InfoTablePanel extends javax.swing.JPanel {

    
    
    
    private InfoTableState state;
    
    private InfoTableListener listener;
    
    private List<Train> trainList;
    private List<Station> stationList;
    private List<Track> trackList;
    private List<Conductor> conductorList;
    private List<TrainSchedule> scheduleList;
    
    /**
     * Creates new form InfoTablePanel
     */
    public InfoTablePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        infoTable = new javax.swing.JTable();
        editBtn = new javax.swing.JButton();

        infoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        infoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(infoTable);

        editBtn.setText("Edit");
        editBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editBtn))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void infoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoTableMouseClicked
        // TODO add your handling code here:
        
        if(evt.getClickCount() == 2 && !evt.isConsumed())
        {
            evt.consume();
            int row = this.infoTable.getSelectedRow();
            
            if(row >= 0)
            {
                this.handleRowSelectEdit(row);
            }
        }
        
    }//GEN-LAST:event_infoTableMouseClicked

    private void editBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editBtnMouseClicked
        // TODO add your handling code here:
        
        int row = this.infoTable.getSelectedRow();
            
        System.out.println("" + row);
            if(row >= 0)
            {
                this.handleRowSelectEdit(row);
            }
        
    }//GEN-LAST:event_editBtnMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editBtn;
    private javax.swing.JTable infoTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    
    public void setListener(InfoTableListener list)
    {
        this.listener = list;
    }
    
    public void populateWithStationList(List<Station> list)
    {
        this.state = ForStations;
        this.stationList = list;
        
        Object[][] model = new Object[list.size()][2];
        
        for(int i=0; i<list.size(); i++)
        {
            Station s = list.get(i);
            model[i][0] = s.getName();
            model[i][1] = s.getAddress();
        }
        
        this.infoTable.setModel(new DefaultTableModel(model, new Object[]{"Name","Address"}));
        this.infoTable.repaint();
    }
    
    public void populateWithTrackList(List<Track> list)
    {
        this.state = ForTracks;
        this.trackList = list;
        
                Object[][] model = new Object[list.size()][3];
        
        for(int i=0; i<list.size(); i++)
        {
            Track s = list.get(i);
            model[i][0] = "" + s.getLength();
            model[i][1] = "" + s.getSourceStation();
            model[i][2] = "" + s.getDestinationStation();
        }
        
        this.infoTable.setModel(new DefaultTableModel(model, new Object[]{"Length","Source","Destination"}));
        this.infoTable.repaint();
        
    }
    
    public void populateWithTrainList(List<Train> list)
    {
        this.state = ForTrains;
        this.trainList = list;
        
                Object[][] model = new Object[list.size()][3];
        
        for(int i=0; i<list.size(); i++)
        {
            Train s = list.get(i);
            model[i][0] = s.getName();
            model[i][1] = "" + s.getType();
            model[i][2] = "" + s.getNumOfWagons();
        }
        
        this.infoTable.setModel(new DefaultTableModel(model, new Object[]{"Name", "Type", "Wagons"}));
        this.infoTable.repaint();
        
        
    }
    
    public void populateWithConductorsList(List<Conductor> list)
    {
        this.state = ForConductors;
        this.conductorList = list;
        
        
                Object[][] model = new Object[list.size()][2];
        
        for(int i=0; i<list.size(); i++)
        {
            Conductor s = list.get(i);
            model[i][0] = s.getFirstName();
            model[i][1] = s.getLastName();
        }
        
        this.infoTable.setModel(new DefaultTableModel(model, new Object[]{"FirstName", "LastName"}));
        this.infoTable.repaint();
    }
    
    
    public void populateWithSchedulesList(List<TrainSchedule> list)
    {
        this.state = ForSchedules;
        this.scheduleList = list;
        
                Object[][] model = new Object[list.size()][5];
        
        for(int i=0; i<list.size(); i++)
        {
            TrainSchedule s = list.get(i);
            model[i][0] = "" + s.getTrainID();
            model[i][1] = "" + s.getTrackID();
            model[i][2] = "" + s.getConductorID();
            model[i][3] = "" + s.getStartHour();
            model[i][4] = "" + s.getStopHour();
        }
        
        this.infoTable.setModel(new DefaultTableModel(model, new Object[]{"Train ID", "Track ID", 
            "Conductor ID", "Start Hour", "Stop Hour"}));
        this.infoTable.repaint();
        
    }
    
    
    private void handleRowSelectEdit(int row)
    {
        if(this.listener == null)
        {
            return;
        }
        
        switch(this.state)
        {
            case ForStations:
            {
                Station s = this.stationList.get(row);
                this.listener.infoTableDidSelectStation(s);
            }
            break;
                
            case ForTrains:
            {
                Train t = this.trainList.get(row);
                this.listener.infoTableDidSelectTrain(t);
            }
            break;
                
            case ForTracks:
            {
                Track t = this.trackList.get(row);
                this.listener.infoTableDidSelectTrack(t);
            }
            break;
                
            case ForConductors:
            {
                Conductor c = this.conductorList.get(row);
                this.listener.infoTableDidSelectConductor(c);
            }
            break;
             
            case ForSchedules:
            {
                TrainSchedule sch = this.scheduleList.get(row);
                // nothing
            }
            break;
            default:
                break;
        }
    }
    
}
